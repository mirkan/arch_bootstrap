#!/bin/env bash
## Description:
## Automatic install of Arch Linux
# Requires partion and mountpoint already setup

## Author: Robin BjÃ¶rnsvik
set -ex
source bin/helpers.sh
source config

export HOSTNAME
export USER
export PASSWORD
export TIMEZONE
export KEYMAP
export LOCALE
export SHELL

# Packages
mirrors="https://www.archlinux.org/mirrorlist/?country=SE&protocol=http&ip_version=4&use_mirror_status=on"

## SELECT MOUNT
# Select which mountpoint to use
_select_mount(){
	# Select mount where to run archbootstrap
	echo -n "Select mountpoint(Default /mnt): "
	read mount

	# Default to /mnt if empty
	[ -z $mount ] && mount=/mnt

	# Check if $mount is mounted
    if ! ( mountpoint -q $mount ); then
		echo "$mount doesn't seem to be mounted" 1>&2
        exit 1
	fi
}
_select_password(){
    echo "Select a password for $USER and 'root':"
    read PASSWORD
    if [ -z $PASSWORD ]; then
        echo "Need a password"
        exit 1
    fi

}
## SET MIRRORS
# Generate mirrorlist for pacman before install
_set_mirrors(){
    # Download and select mirrors
    echo "Generating mirrorlist"
    tmpfile=$(mktemp --suffix=-mirrorlist)
    curl -so $tmpfile $mirrors
    sed -i 's/^#Server/Server/g' $tmpfile

    mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.orig
    mv $tmpfile /etc/pacman.d/mirrorlist

    # Rankmirrors to make this faster
    cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.tmp
    rankmirrors -n 3 /etc/pacman.d/mirrorlist.tmp > /etc/pacman.d/mirrorlist
    rm /etc/pacman.d/mirrorlist.tmp
    chmod +r /etc/pacman.d/mirrorlist

    # Update pacman db
    pacman -Syy
}
## BASE INSTALL
# Run arch bootstrap and install base system
_base_install(){
    # Run pacstrap
    echo "Running pacstrap install"
    pacstrap $mount base base-devel

    # Generate fstab
    genfstab -p $mount >> $mount/etc/fstab

    # Copy the mirrorlist to the new system
    cp /etc/pacman.d/mirrorlist* $mount/etc/pacman.d
}

## SYSTEM CONFIGURE
# Setup the new system with arch-root
_system_configure(){
    echo "Configuring system"
    arch-chroot $mount /bin/bash -s < bin/configure_system.sh

    # Gummiboot
    _arch-chroot "pacman -S gummiboot --noconfirm"
    _arch-chroot "gummiboot install --path=/boot"

    cat <<EOF > $mount/efi/loader/entries/arch.conf
        title Arch Linux
        linux /vmlinuz-linux
        initrd /initramfs-linux.img
        options root=PARTUUID=$(blkid -s PARTUUID -o value $ROOT_PARTITION)
EOF
}

## INSTALL PACKAGES
# Create new mirrorlist, modify pacman.conf and install packages
_install_packages(){
    # Uncomment multilib
    _arch-chroot "sed -i -r -e '/^#\[multilib\]/ { s/^#// ; n ; s/^#// }' /etc/pacman.conf"

    # Install packages
    echo "Installing packages...."
    _arch-chroot "pacman -Syy"
    _arch-chroot "pacman -S --noconfirm \
        $(sed '/^#/d' packages | tr '\n' ' ')"              # Avoid lines with comments and remove newlines
}

## INSTALL AUR PACKAGES
# Download and install AUR Packages with packer
_install_aur_packages() {
    # Install AUR packages
    echo "Installing packer"
    # Download packer, build and install
    _user-chroot $USER "wget https://aur.archlinux.org/packages/pa/packer/PKGBUILD"
    _user-chroot $USER "makepkg -is --noconfirm PKGBUILD"
    _user-chroot $USER "rm -rf PKGBUILD pkg src packer*"

    # Install all AUR packages in 'packages_aur'
    echo "Installing AUR packages..."
    _user-chroot $USER "packer -S  \
        $(sed '/^#/d' packages_aur | tr '\n' ' ') --noconfirm"
}

_dotfiles(){
    # Get git rep for dotfiles and scripts
    echo "Downloading dotfiles"
    _user-chroot $USER "git clone $DOTFILES_REP .dotfiles"
    _user-chroot $USER "sh .dotfiles/install"

    # Compile vim-plugin: youcompleteme
    _user-chroot $USER "sh .dotfiles/vim/bundle/vim-youcompleteme/install.sh"
}

_bash_scripts(){
    # Downloads bash-scripts repo
    echo "Downloading bash-scripts"
    _user-chroot $USER "git clone $SCRIPTS_REP .bin"
}
## RUNTIME
if [ "$(id -u)" != "0" ]; then
    echo "This script requires root." 1>&2
    exit 1
fi
_select_mount
_select_password
_set_mirrors
_base_install
_system_configure
_install_packages
_install_aur_packages
_dotfiles
_bash_scripts
